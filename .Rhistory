18 ,-0.04 ,-0.07,
19 , 0.07 , 0.10,
20, 0.01 ,-0.04
)
value = matrix(v, nrow = 20, ncol = 3, byrow = TRUE)
dimnames(value) = list(c("", "", "", "", "", "", "", "", "", "",
"", "", "", "", "", "", "", "", "", ""), c("LAG", "ACF", "PACF"))
a <- populate_rectangular_treeview(window, value)
tkconfigure(a$treeview, selectmode = "extended") # multiple
tkconfigure(a$frame, width = 300, height = 500) # frame size
tkpack(a$frame, expand = TRUE, fill = "both")
}
#==============================================================
addHandlerChanged(btn_SEE, handler = function(h,...){
plot.new()
# define row and column titles
mrownames = spl('row one,row two,row 3')
mcolnames = spl('col 1,col 2,col 3,col 4')
# create temp matrix with data you want to plot
temp = matrix(NA, len(mrownames), len(mcolnames))
rownames(temp) = mrownames
colnames(temp) = mcolnames
temp[,] = matrix(1:12,3,4)
# plot temp, display current date in (top, left) cell
plot.table(temp, format(as.Date(Sys.time()), '%d %b %Y'))
})
##=========== nhan dang cac mo hinh arima ==================================================
addHandlerChanged(btn_equation, handler = function(h,..){
childWindow = gwindow("Nh???n d???ng các tham s??? mô hình AIRMA", visible = TRUE)
lyt = glayout(cont = childWindow)
lyt[1,1] <- (lbl_p <- glabel(text = "p"))
lyt[1,2] <- (txt_p <- gedit())
lyt[2,1] <- (lbl_d <- glabel(text = "d"))
lyt[2,2] <- (txt_d <- gedit())
lyt[3,1] <- (lbl_q <- glabel(text = "q"))
lyt[3,2] <- (txt_q <- gedit())
lyt[4,1] <- (btn_ARIMA <- gbutton("ARIMA"))
addHandlerChanged(btn_ARIMA, handler =  function(h,...){
childWindow = gwindow("Nh???n d???ng các tham s??? mô hình AIRMA", visible = TRUE)
lyt.arima = glayout(cont = childWindow)
lyt.arima[1,1] <- (text_aic <- glabel("AIC"))
lyt.arima[3,1] <- (text_bic <- glabel("R^2"))
lyt.arima[7,1] <- (text_R <- glabel("BIC"))
lyt.arima[5,1] <- (text_SEE <- glabel("SEE"))
valueD = as.numeric(svalue(txt_d))
valueP = as.numeric(svalue(txt_p))
valueQ = as.numeric(svalue(txt_q))
stock = read.csv(svalue(txt_pathFile), header = T, dec = ".", sep = ",")
print(stock[,2])
valueARIMA = arima(stock[,2], order = c(valueP, valueD, valueQ))
print(valueARIMA)
lyt.arima[1,2] <- (value_aic <- glabel(toString(round(valueARIMA$aic, digits = 4))))
x = stock[,2]
n = length(x)
tss = var(x) * (length(x) - 1)
rss = sum((valueARIMA$residuals)^2)
print(rss)
r_square = ((tss - rss)/tss)
see = sqrt(as.integer(rss/(length(x) - 2)))
##bic = (n * logb(see, base = exp(1))) + ((valueP + valueQ + valueD) * logb(n, base = exp(1)))
bic = (n * log(see) + (valueP + valueQ + valueD) * log(n))
r_square = round(r_square, digits = 4)
see = round(see, digits = 4)
bic = round(bic, digits = 4)
lyt.arima[3,2] <- (value_rsquare <- glabel(toString(r_square)))
lyt.arima[5, 2] <- (value_see <- glabel(toString(see)))
lyt.arima[7,2] <- (value_bic <- glabel(toString(bic)))
})
})
##==================== Hien thi du bao ===============================
addHandlerChanged(btn_forecast, handler =  function(h,..){
pathFile = svalue(txt_pathFile)
stock = read.csv(pathFile, header = T, dec = ".", sep = ",")
stock.arima = sarima.for(stock[,2], 30, 0, 1, 1)
stock.predict <- as.vector(stock.arima$pred)
plot.new()
window <- tktoplevel()
v = c(
1,  round(stock.predict[1], digits = 4)  ,0.12,
2 , round(stock.predict[2], digits = 4) ,-0.07,
3 , round(stock.predict[3], digits = 4)  , -0.03,
4,  round(stock.predict[4], digits = 4)  ,0.10,
5 , round(stock.predict[5], digits = 4)  ,0.06,
6 , round(stock.predict[6], digits = 4)  ,-0.04,
7 , round(stock.predict[7], digits = 4)  ,0.07,
8 , round(stock.predict[8], digits = 4)  ,-0.01,
9 , round(stock.predict[9], digits = 4)  ,-0.08,
10, round(stock.predict[10],digits = 4)  ,-0.11,
11, round(stock.predict[11] ,digits = 4)  , 0.09,
12, round(stock.predict[12] ,digits = 4)  ,-0.03,
13, round(stock.predict[13] , digits = 4)  ,0.11,
14, round(stock.predict[14] , digits = 4)  ,0.02,
15, round(stock.predict[15],digits = 4)  ,-0.08,
16, round(stock.predict[16], digits = 4)  ,0.12,
17, round(stock.predict[17],digits = 4)  ,-0.07,
18, round(stock.predict[18], digits = 4)  ,-0.03,
19, round(stock.predict[19], digits = 4)  ,0.10,
20, round(stock.predict[20], digits = 4)  ,0.06,
21, round(stock.predict[21], digits = 4)  ,-0.04,
22, round(stock.predict[22],  digits = 4)  ,0.07,
23, round(stock.predict[23], digits = 4)  ,-0.01,
24, round(stock.predict[24], digits = 4)  ,-0.08,
25, round(stock.predict[25], digits = 4)  ,-0.11,
26, round(stock.predict[26],digits = 4)  , 0.09,
27, round(stock.predict[27], digits = 4)  ,-0.03,
28, round(stock.predict[28], digits = 4)  ,0.11,
29, round(stock.predict[29], digits = 4)  ,0.02,
30, round(stock.predict[30], digits = 4)  ,-0.08
)
value = matrix(v, nrow = 30, ncol = 3, byrow = TRUE)
dimnames(value) = list(c("", "", "", "", "", "", "", "", "", "",
"", "", "", "", "", "", "", "", "", "",
"", "", "", "", "", "", "", "", "", ""), c("STT", "Predict", "Real Value"))
a <- populate_rectangular_treeview(window, value)
tkconfigure(a$treeview, selectmode = "extended") # multiple
tkconfigure(a$frame, width = 300, height = 500) # frame size
tkpack(a$frame, expand = TRUE, fill = "both")
#stockTimeseries = ts(stock[, 2], start = c(2009, 2, 1), end = c(2010, 31, 3), frequency = 365)
#plot.ts(stockTimeseries, type = "l", col = "black", lwd = 1)
plot.ts(stock[,2])
lines(stock.arima$pred, col = "red")
lines(stock.arima$pred + 2 * stock.arima$se, col = "red", lty = 3)
lines(stock.arima$pred - 2 * stock.arima$se, col = "red", lty = 3)
})
#############Ham hien ACF and PACF
addScrollbars <- function(parent, widget) {
xscr <- ttkscrollbar(parent, orient = "horizontal",
command = function(...) tkxview(widget, ...))
yscr <- ttkscrollbar(parent, orient = "vertical",
command = function(...) tkyview(widget, ...))
##
tkconfigure(widget,
xscrollcommand = function(...) tkset(xscr,...),
yscrollcommand = function(...) tkset(yscr,...))
##
tkgrid(widget, row = 0, column = 0, sticky = "news")
tkgrid(yscr, row = 0,column = 1, sticky = "ns")
tkgrid(xscr, row = 1, column = 0, sticky = "ew")
tkgrid.columnconfigure(parent, 0, weight = 1)
tkgrid.rowconfigure(parent, 0, weight = 1)
}
populate_rectangular_treeview <- function(parent, m) {
enc_frame <- ttkframe(parent)
frame <- ttkframe(enc_frame)
tkpack(frame, expand = TRUE, fill = "both")
treeview <- ttktreeview(frame,
columns = seq_len(ncol(m)),
show = "headings")
addScrollbars(frame, treeview)
tkpack.propagate(enc_frame, FALSE)    # size from frame
## headings,widths
font_measure <- tcl("font","measure","TkTextFont","0")
charWidth <- as.integer(tclvalue(font_measure))
sapply(seq_len(ncol(m)), function(i) {
tcl(treeview, "heading", i, text = colnames(m)[i])
tcl(treeview, "column", i,
width = 10 + charWidth*max(apply(m, 2, nchar)))
})
tcl(treeview, "column", ncol(m), stretch = TRUE)
## values
if(ncol(m) == 1)  m <- as.matrix(paste("{", m, "}", sep=""))
apply(m, 1, function(vals)
tcl(treeview, "insert", "", "end", values = vals))
return(list(treeview = treeview, frame = enc_frame))
}
##Dung ggrahics de hien thi len frame
gg = ggraphics(cont = paned)
visible(window) = TRUE
## D:/Project code/Dropbox/Graduate/data/datavndex.csv
#residual sum of squares
#p = 0, 10, q = 1, 10, 13
require("gWidgets")
require("tseries")
require("astsa")
require("tcltk")
require("xlsx")
options(guiToolkit = "RGtk2")
setInternet2(TRUE)
con = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))
source(con)
window <- gwindow("File Search", visible = FALSE)
paned <- gpanedgroup(cont = window)
##### Display file name
group <- ggroup(cont = paned, horizontal = FALSE)
glabel("Path File: ", cont = group, anchor = c(-1, 0))
txt_pathFile = gedit("", initial.msg =  "Enter path file name", cont = group)
############################# Menu hien thi chuc nang ######y = ###################################
menu <- gframe(gettext("Menu"),cont = group, horizontal = TRUE, expand = TRUE)
lyt <- glayout(cont = menu)
listWidgets <- list()
##Button
lyt[4,1] <- (btn_showData = gbutton("Show Data", cont = lyt))
lyt[4,2] <- (btnRootTest = gbutton("Unit Root Test", cont = lyt))
lyt[2,1] <- "Graph"
lyt[2,2] <- (listGraph = gcombobox(c("","0", "1", "2"), cont = lyt))
lyt[6,1] <- (btn_ACF = gbutton("ACF", cont = lyt))
lyt[6,2] <- (btn_PACF <- gbutton("PACF", cont = lyt))
lyt[8,1] <- (btn_equation = gbutton("Equation", cont = lyt))
lyt[8,2] <- (btn_forecast <- gbutton("Forecast", cont = lyt))
#showdata
addHandlerClicked(btn_showData, handler = function(h,...){
pathFile = svalue(txt_pathFile)
if(pathFile == "") galert("Unknow file path", parent = window)
else
{
customer = read.csv(pathFile, header = T, dec = ".", sep = ",")
fix(customer)
}
})
############# Hien thi cac graph ban dau, sai phan bac 1, sai phan bac 2
addHandlerChanged(listGraph, handler = function(h,...){
pathFile = svalue(txt_pathFile)
valueGraph = svalue(listGraph)
print(valueGraph)
if(pathFile == "") galert("Unknow file path", parent = window)
else
{
stock = read.csv(pathFile, header = T, dec = ".", sep = ",")
if(valueGraph == "0")
{
stockTimeseries = ts(stock[, 2], start = c(2009, 2, 1), end = c(2010, 31, 3), frequency = 365)
plot.ts(stockTimeseries, type = "l", col = "red", lwd = 1)
}
else if(valueGraph == "1")
{
stockTimeseries = ts(diff(stock[, 2]), start = c(2009, 2, 1), end = c(2010, 31, 3), frequency = 365)
plot.ts(stockTimeseries, type = "l", col = "red", lwd = 1)
}
else if(valueGraph == "2")
{
stockTimeseries = ts(diff(diff(stock[, 2])), start = c(2009, 2, 1), end = c(2010, 31, 3), frequency = 365)
plot.ts(stockTimeseries, type = "l", col = "red", lwd = 1)
}
}
})
addHandlerChanged(btnRootTest, handler = function(h,...){
childWindow = gwindow("Augmented Dickey Fuller", visible = TRUE)
})
#========================= 2 ham ACF va PACF =====================================
addHandlerChanged(btn_ACF, handler =  function(h,...){
plot.new()
stock = read.csv(svalue(txt_pathFile), header = T, dec = ".", sep = ",")
plot.new()
acf = acf(diff(stock[,2]), lag.max = 20)
createTable()
})
addHandlerChanged(btn_PACF, handler = function(h,...){
plot.new()
stock = read.csv(svalue(txt_pathFile), header = T, dec = ".", sep = ",")
plot.new()
pacf <- pacf(diff(stock[,2]), lag.max = 20)
createTable()
})
createTable <- function(h,...){
window <- tktoplevel()
v = c(0, 1, "NA",
1,  0.12  ,0.12,
2 ,-0.05 ,-0.07,
3 ,-0.04, -0.03,
4,  0.10  ,0.10,
5 , 0.09  ,0.06,
6 ,-0.03 ,-0.04,
7  ,0.05,  0.07,
8  ,0.02 ,-0.01,
9 ,-0.06 ,-0.08,
10 ,-0.13 ,-0.11,
11 , 0.07 , 0.09,
12  ,0.02 ,-0.03,
13 , 0.09 , 0.11,
14  ,0.00 , 0.02,
15 ,-0.08 ,-0.08,
16 , 0.04 , 0.06,
17 ,-0.04 ,-0.06,
18 ,-0.04 ,-0.07,
19 , 0.07 , 0.10,
20, 0.01 ,-0.04
)
value = matrix(v, nrow = 20, ncol = 3, byrow = TRUE)
dimnames(value) = list(c("", "", "", "", "", "", "", "", "", "",
"", "", "", "", "", "", "", "", "", ""), c("LAG", "ACF", "PACF"))
a <- populate_rectangular_treeview(window, value)
tkconfigure(a$treeview, selectmode = "extended") # multiple
tkconfigure(a$frame, width = 300, height = 500) # frame size
tkpack(a$frame, expand = TRUE, fill = "both")
}
#==============================================================
addHandlerChanged(btn_SEE, handler = function(h,...){
plot.new()
# define row and column titles
mrownames = spl('row one,row two,row 3')
mcolnames = spl('col 1,col 2,col 3,col 4')
# create temp matrix with data you want to plot
temp = matrix(NA, len(mrownames), len(mcolnames))
rownames(temp) = mrownames
colnames(temp) = mcolnames
temp[,] = matrix(1:12,3,4)
# plot temp, display current date in (top, left) cell
plot.table(temp, format(as.Date(Sys.time()), '%d %b %Y'))
})
##=========== nhan dang cac mo hinh arima ==================================================
addHandlerChanged(btn_equation, handler = function(h,..){
childWindow = gwindow("Nh???n d???ng các tham s??? mô hình AIRMA", visible = TRUE)
lyt = glayout(cont = childWindow)
lyt[1,1] <- (lbl_p <- glabel(text = "p"))
lyt[1,2] <- (txt_p <- gedit())
lyt[2,1] <- (lbl_d <- glabel(text = "d"))
lyt[2,2] <- (txt_d <- gedit())
lyt[3,1] <- (lbl_q <- glabel(text = "q"))
lyt[3,2] <- (txt_q <- gedit())
lyt[4,1] <- (btn_ARIMA <- gbutton("ARIMA"))
addHandlerChanged(btn_ARIMA, handler =  function(h,...){
childWindow = gwindow("Nh???n d???ng các tham s??? mô hình AIRMA", visible = TRUE)
lyt.arima = glayout(cont = childWindow)
lyt.arima[1,1] <- (text_aic <- glabel("AIC"))
lyt.arima[3,1] <- (text_bic <- glabel("R^2"))
lyt.arima[7,1] <- (text_R <- glabel("BIC"))
lyt.arima[5,1] <- (text_SEE <- glabel("SEE"))
valueD = as.numeric(svalue(txt_d))
valueP = as.numeric(svalue(txt_p))
valueQ = as.numeric(svalue(txt_q))
stock = read.csv(svalue(txt_pathFile), header = T, dec = ".", sep = ",")
print(stock[,2])
valueARIMA = arima(stock[,2], order = c(valueP, valueD, valueQ))
print(valueARIMA)
lyt.arima[1,2] <- (value_aic <- glabel(toString(round(valueARIMA$aic, digits = 4))))
x = stock[,2]
n = length(x)
tss = var(x) * (length(x) - 1)
rss = sum((valueARIMA$residuals)^2)
print(rss)
r_square = ((tss - rss)/tss)
see = sqrt(as.integer(rss/(length(x) - 2)))
##bic = (n * logb(see, base = exp(1))) + ((valueP + valueQ + valueD) * logb(n, base = exp(1)))
bic = (n * log(see) + (valueP + valueQ + valueD) * log(n))
r_square = round(r_square, digits = 4)
see = round(see, digits = 4)
bic = round(bic, digits = 4)
lyt.arima[3,2] <- (value_rsquare <- glabel(toString(r_square)))
lyt.arima[5, 2] <- (value_see <- glabel(toString(see)))
lyt.arima[7,2] <- (value_bic <- glabel(toString(bic)))
})
})
##==================== Hien thi du bao ===============================
addHandlerChanged(btn_forecast, handler =  function(h,..){
pathFile = svalue(txt_pathFile)
stock = read.csv(pathFile, header = T, dec = ".", sep = ",")
stock.arima = sarima.for(stock[,2], 30, 0, 1, 1)
stock.predict <- as.vector(stock.arima$pred)
plot.new()
window <- tktoplevel()
v = c(
1,  round(stock.predict[1], digits = 4)  ,0.12,
2 , round(stock.predict[2], digits = 4) ,-0.07,
3 , round(stock.predict[3], digits = 4)  , -0.03,
4,  round(stock.predict[4], digits = 4)  ,0.10,
5 , round(stock.predict[5], digits = 4)  ,0.06,
6 , round(stock.predict[6], digits = 4)  ,-0.04,
7 , round(stock.predict[7], digits = 4)  ,0.07,
8 , round(stock.predict[8], digits = 4)  ,-0.01,
9 , round(stock.predict[9], digits = 4)  ,-0.08,
10, round(stock.predict[10],digits = 4)  ,-0.11,
11, round(stock.predict[11] ,digits = 4)  , 0.09,
12, round(stock.predict[12] ,digits = 4)  ,-0.03,
13, round(stock.predict[13] , digits = 4)  ,0.11,
14, round(stock.predict[14] , digits = 4)  ,0.02,
15, round(stock.predict[15],digits = 4)  ,-0.08,
16, round(stock.predict[16], digits = 4)  ,0.12,
17, round(stock.predict[17],digits = 4)  ,-0.07,
18, round(stock.predict[18], digits = 4)  ,-0.03,
19, round(stock.predict[19], digits = 4)  ,0.10,
20, round(stock.predict[20], digits = 4)  ,0.06,
21, round(stock.predict[21], digits = 4)  ,-0.04,
22, round(stock.predict[22],  digits = 4)  ,0.07,
23, round(stock.predict[23], digits = 4)  ,-0.01,
24, round(stock.predict[24], digits = 4)  ,-0.08,
25, round(stock.predict[25], digits = 4)  ,-0.11,
26, round(stock.predict[26],digits = 4)  , 0.09,
27, round(stock.predict[27], digits = 4)  ,-0.03,
28, round(stock.predict[28], digits = 4)  ,0.11,
29, round(stock.predict[29], digits = 4)  ,0.02,
30, round(stock.predict[30], digits = 4)  ,-0.08
)
value = matrix(v, nrow = 30, ncol = 3, byrow = TRUE)
dimnames(value) = list(c("", "", "", "", "", "", "", "", "", "",
"", "", "", "", "", "", "", "", "", "",
"", "", "", "", "", "", "", "", "", ""), c("STT", "Predict", "Real Value"))
a <- populate_rectangular_treeview(window, value)
tkconfigure(a$treeview, selectmode = "extended") # multiple
tkconfigure(a$frame, width = 300, height = 500) # frame size
tkpack(a$frame, expand = TRUE, fill = "both")
#stockTimeseries = ts(stock[, 2], start = c(2009, 2, 1), end = c(2010, 31, 3), frequency = 365)
#plot.ts(stockTimeseries, type = "l", col = "black", lwd = 1)
plot.ts(stock[,2])
lines(stock.arima$pred, col = "red")
lines(stock.arima$pred + 2 * stock.arima$se, col = "red", lty = 3)
lines(stock.arima$pred - 2 * stock.arima$se, col = "red", lty = 3)
})
#############Ham hien ACF and PACF
addScrollbars <- function(parent, widget) {
xscr <- ttkscrollbar(parent, orient = "horizontal",
command = function(...) tkxview(widget, ...))
yscr <- ttkscrollbar(parent, orient = "vertical",
command = function(...) tkyview(widget, ...))
##
tkconfigure(widget,
xscrollcommand = function(...) tkset(xscr,...),
yscrollcommand = function(...) tkset(yscr,...))
##
tkgrid(widget, row = 0, column = 0, sticky = "news")
tkgrid(yscr, row = 0,column = 1, sticky = "ns")
tkgrid(xscr, row = 1, column = 0, sticky = "ew")
tkgrid.columnconfigure(parent, 0, weight = 1)
tkgrid.rowconfigure(parent, 0, weight = 1)
}
populate_rectangular_treeview <- function(parent, m) {
enc_frame <- ttkframe(parent)
frame <- ttkframe(enc_frame)
tkpack(frame, expand = TRUE, fill = "both")
treeview <- ttktreeview(frame,
columns = seq_len(ncol(m)),
show = "headings")
addScrollbars(frame, treeview)
tkpack.propagate(enc_frame, FALSE)    # size from frame
## headings,widths
font_measure <- tcl("font","measure","TkTextFont","0")
charWidth <- as.integer(tclvalue(font_measure))
sapply(seq_len(ncol(m)), function(i) {
tcl(treeview, "heading", i, text = colnames(m)[i])
tcl(treeview, "column", i,
width = 10 + charWidth*max(apply(m, 2, nchar)))
})
tcl(treeview, "column", ncol(m), stretch = TRUE)
## values
if(ncol(m) == 1)  m <- as.matrix(paste("{", m, "}", sep=""))
apply(m, 1, function(vals)
tcl(treeview, "insert", "", "end", values = vals))
return(list(treeview = treeview, frame = enc_frame))
}
##Dung ggrahics de hien thi len frame
gg = ggraphics(cont = paned)
visible(window) = TRUE
## D:/Project code/Dropbox/Graduate/data/datavndex.csv
#residual sum of squares
#p = 0, 10, q = 1, 10, 13
p = 1
q = 1
d = 1
name_image = paste("ARIMA(", toString(p),",", toString(d),",", toString(q) ,")")
path_img = paste(pathDirect, "image/", name_image)
pathDirect
pathFile
pathFile = D:/Project code/Dropbox/Graduate/Do an/ctk41.csv
pathFile = "D:/Project code/Dropbox/Graduate/Do an/ctk41.csv"
pathDirect =  "D:/Project code/Dropbox/Graduate/Do an/"
name_image = paste("ARIMA(", toString(p),",", toString(d),",", toString(q) ,")")
path_img = paste(pathDirect, "image/", name_image)
path_img
D:/Project code/Dropbox/Graduate/Do an/ image/
name_image = paste("ARIMA(",toString(p),",",toString(d),",",toString(q) ,")")
path_img = paste(pathDirect,"image/",name_image)
path_img
png(path_img)
png(file = path_img)
jpeg(file = path_img)
jpeg(file = "D:/Project code/Dropbox/Graduate/Do an/ image/ ARIMA( 1 , 1 , 1 ).png")
jpeg(file = "D:/Project code/Dropbox/Graduate/Do an/image/ARIMA( 1 , 1 , 1 ).png")
arima
gold[,2]
name_image = paste("ARIMA(",toString(p),",",toString(d),",",toString(q) ,")")
name_image
gold = read.csv(pathFile, header = T, dec = ".", sep = ",")
require("forecast")
fit = auto.arima(gold[,2])
fit
pathFile
pathDirect
name_image = paste("ARIMA(",toString(p),",",toString(d),",",toString(q) ,")")
path_img = paste(pathDirect,"image/",name_image)
path_img
acf(fit$residuals)
dev.off()
png(file = path_img)
print("a/", "b")
print(paste("a/", "b"))
print(paste("a/","b"))
print(paste0("a/","b"))
name_image = paste0("test_whiteNoise_ARIMA(",toString(p),",",toString(d),",",toString(q) ,")")
png(file = paste0(pathDirect,"image/",name_image))
acf(fit$residuals)
dev.off()
acf(fit$residuals)
name_image = paste0("test_whiteNoise_ARIMA(",toString(p),",",toString(d),",",toString(q) ,")")
path_img = paste0(pathDirect, "image/", name_image)
png(file = path_img)
acf(fit$residuals)
dev.off()
name_image = paste0("test_whiteNoise_ARIMA(",toString(p),",",toString(d),",",toString(q) ,").png")
path_img = paste0(pathDirect, "image/", name_image)
png(file = path_img)
acf(fit$residuals, main = "Kiểm tra nhiễu trắng mô hình")
dev.off()
arima = fit
name_image = paste0("test_whiteNoise_ARIMA(",toString(p),",",toString(d),",",toString(q) ,").png")
path_img = paste0(pathDirect, "image/", name_image)
png(file = path_img)
acf(arima$residuals, main = paste("Kiểm tra nhiễu trắng mô hình", paste0(ARIMA(",toString(p),",",toString(d),",",toString(q) ,")))
dev.off()
name_image = paste0("test_whiteNoise_ARIMA(",toString(p),",",toString(d),",",toString(q) ,").png")
path_img = paste0(pathDirect, "image/", name_image)
png(file = path_img)
acf(arima$residuals, main = paste("Kiểm tra nhiễu trắng mô hình", paste0("ARIMA(",toString(p),",",toString(d),",",toString(q) ,")")))
dev.off()
